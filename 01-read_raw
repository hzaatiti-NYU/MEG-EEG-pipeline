#Import the few packages we'll need
import matplotlib
import pathlib
import mne

#Ensure Matplotlib uses the Qt5Agg backend, which is the best choice for MNE-Python's interactive plotting functions.
matplotlib.use('Qt5Agg')

# Load the two raw data files
raw1 = mne.io.read_raw_fif('GS_01_analysis_01-raw.fif', preload=True)
raw2 = mne.io.read_raw_fif('GS_02_analysis_01-raw.fif', preload=True)
raw= mne.io.concatenate_raws([raw1, raw2])

#Let's visualize the raw data!
raw.plot()

# Extract events
events = mne.find_events(raw, stim_channel="STI 014")
event_id = {
    "eyes closed": 1,
    "eyes open": 2,
}

#Plot the raw data again, but add event markers
raw.plot(events=events, event_id=event_id)

# Gather some info about the data
raw.info
raw.info['bads']

# Visualize the sensor locations
raw.plot_sensors

# Mark channels as bad

channels_with_issues = ['MEG 053', 'MEG 067', 'MEG 102', 'MEG 137', 'MEG 154', 'MEG 181', 'MEG 182', 'MEG 183']
raw_concatenated.info['bads'] = channels_with_issues


#Crop and filter the data
raw_cropped = raw.copy().crop(tmax=100)
raw_cropped.times[-1]
raw_cropped_filtered = raw_cropped.filter(l_freq=0.1, h_freq=40)
raw_cropped.load_data()
raw_cropped_filtered = raw_cropped.copy().filter(l_freq=0.1, h_freq=40)
raw_cropped.plot(events=events, event_id=event_id)
raw_cropped_filtered.plot(events=events, event_id=event_id)
import matplotlib.pyplot as plt

fig, ax = plt.subplots(2)

raw_cropped.plot_psd(ax=ax[0], show=False)
raw_cropped_filtered.plot_psd(ax=ax[1], show=False)

ax[0].set_title('PSD before filtering')
ax[1].set_title('PSD after filtering')
ax[1].set_xlabel('Frequency (Hz)')
fig.set_tight_layout(True)
plt.show()
